// AbsoluteValue.vm
// Computes z = |x|, where x = argument[0] (not to be modified).
// The result z is stored in argument[1].
// If x < 0, then argument[2] = 1; otherwise argument[2] = 0.
// If x = -32768, the absolute value cannot be computed, so argument[3] = 1; otherwise argument[3] = 0.

// Initialize argument[3] = 0, assuming the absolute value can be computed
push constant 0
pop argument 3

// Check if x might be -32768 or 0
// In 16-bit two's complement, if 2*x == 0, then x might be 0 or -32768
push argument 0
push argument 0
add               // Compute 2*x
push constant 0
eq                // Is 2*x == 0 ? 
if-goto CHECKXISZERO
goto CHECKSIGN    // Otherwise, proceed with normal sign check

(CHECKXISZERO)
// If 2*x == 0, x could be 0 or -32768; distinguish these two cases
push argument 0
push constant 0
eq                // Is x == 0 ?
if-goto XISZERO

// If not 0, then x must be -32768
// Set argument[3] = 1 (cannot compute absolute value)
push constant 1
pop argument 3
// Also set argument[2] = 1, because x < 0
push argument 0
pop argument 1
push constant 1
pop argument 2
goto END

(XISZERO)
// If x == 0, then its absolute value is 0
push constant 0
pop argument 1     // z = 0
push constant 0
pop argument 2     // x >= 0, so argument[2] = 0
goto END

// Check x's sign
(CHECKSIGN)
push argument 0
push constant 0
lt                 // Is x < 0 ?
if-goto XNEGATIVE

(XNOTNEGATIVE)
// If x >= 0, absolute value is x
push argument 0
pop argument 1     // z = x
push constant 0
pop argument 2     // x is not negative, so argument[2] = 0
goto END

(XNEGATIVE)
// If x < 0, absolute value is -x
push argument 0
neg
pop argument 1     // z = -x
push constant 1
pop argument 2     // x is negative, so argument[2] = 1
goto END

(END)
// End of program
